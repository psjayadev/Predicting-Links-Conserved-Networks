%% A code to predict the unknown links in the conservation graph of a conserved network 
% The flow data and known links pertaining to the network can be given as input 

noise_flag = -1;
data_flag = input('<strong> Enter 1 if you want to feed data : \n Enter 2 if you want a random network and data to be generated </strong>\n');
if isempty(data_flag)
    fprintf(2, 'No input given: Random Network will be generated by default\n');
    data_flag = 2;
elseif (data_flag ~= 1 && data_flag ~=2)
    fprintf(2, 'Invalid input: Random Network will be generated by default\n');
    data_flag = 2;
end

if (data_flag ==1)
    fprintf('\n Checking the provision of data in the workspace with the variable name X and connectivity of known links  with variable names Ab and Ab_edges \n');
    test = exist('X','var');
    if test==1
        fprintf(2, 'Data provided\n')
    else
        fprintf(2, 'Data NOT provided\n')
        return
    end
    test = exist('Ab','var');
    if test==0
        fprintf(2, 'Connectivity information of known links NOT provided\n')
        return
    end
    test = exist('Ab_edges','var');
    if test==1
        fprintf(2, 'Connectivity information of known links provided\n')
    else
        fprintf(2, 'Connectivity information of known links NOT provided completely\n')
        return
    end
    if size(Ab,2)~=size(Ab_edges,2)
        fprintf(2, 'The provided connectivity information of known links is NOT correct or consistent \n')
        return
    end

    while (noise_flag ~= 0 && noise_flag ~=1)
    noise_flag = input('\n <strong> Enter 1 if data is noisy : Enter 0 if data is noisefree </strong> \n');
        if isempty(noise_flag)
            fprintf(2, 'No input given \n');
            noise_flag = -1;
        elseif (noise_flag ~= 0 && noise_flag ~=1)
            fprintf(2, 'Invalid input \n');
        end
    end    

    if noise_flag==1
        noise_case = input('\n <strong> Enter 1 for homoscedastic case (or) Enter 0 for heteroscedastic case and and provide a variable SNR comprising SNR values </strong> \n');
        test = exist('SNR','var');
        if isempty(noise_case)
            fprintf(2, 'No input given \n');
            return
        elseif noise_case==1
            SNR = noise_case;
            fprintf(2, 'Homosedastic Case \n')
        elseif test==1 && noise_case==0
            if e==size(SNR,1)
                fprintf(2, 'Heteroscedastic case : SNR values provided \n')
            else
                fprintf(2, 'Heteroscedastic case : SNR values provided but invalid \n SNR should be a column matrix of dimension equal to no. of variables in the data \n'); 
            return
            end
        elseif noise_case~=0 && noise_case~=1 
            fprintf(2, 'Invalid input \n');
            return
        else
            fprintf(2, 'SNR values NOT provided \n')
            return
        end
    end

else

    network_flag = input('\n <strong> Enter 1 for Erdos-Renyi Network : Enter 2 for Small World Network : Enter 3 for Scale Free Network </strong> \n');
    if isempty(network_flag)
        fprintf(2, 'No input given: Erdos-Renyi network chosen by default \n');
        network_flag = 1;
    elseif (network_flag ~= 1 && network_flag ~=2 && network_flag ~=3)
        fprintf(2, 'Invalid input: Erdos-Renyi network chosen by default \n');
        network_flag = 1;
    end

    n = input('\n <strong> Choose number of nodes for topology of network to be generated, a value between 10 and 100 </strong> \n');
    if isempty(n)
        fprintf(2,'No input given: Set to default value of 10 \n')
        n=10;
    elseif (n<10 || n>100)
        fprintf(2,'Invalid input: Set to default value of 10 \n');
        n=10;
    end

    % Generating a random network and its conservation graph 
    [Inc_Con,Cc_Con,Ab,n_c,e_c,branch,chord,b,c] = Network_Generation(n,network_flag);
    fprintf(2, '\n Randomly generated a network whose conservation graph has %d nodes and %d edges\n',n_c,e_c);


    Nmultiple = input('\n <strong> For no. of samples, enter a value between 1 and 100 (multiple of no. of edges) </strong> \n');
    if isempty(Nmultiple)
        fprintf(2,'No input given: Set to default value of 1 \n')
        Nmultiple=1;
    elseif (Nmultiple<1 || Nmultiple>100)
        fprintf(2,'Invalid input: Set to default value of 1 \n');
        Nmultiple=1;
    else
        Nmultiple = round(Nmultiple);
    end

    noise_flag = input('\n <strong> Enter 1 if data is to be noisy : Enter 0 if data is to be noisefree </strong> \n');
    if isempty(noise_flag)
        fprintf(2, 'No input given: Generating noisefree data by default \n')
        noise_flag=0;
    elseif (noise_flag ~= 0 && noise_flag ~=1)
        fprintf(2, 'Invalid input: Generating noisefree data by default \n');
        noise_flag=0;
    end


    if noise_flag==1
        noise_case = input('\n <strong> Enter 0 for homoscedastic case (or) Enter 1 for heteroscedastic case </strong> \n');
        if isempty(noise_case)
            fprintf(2, 'No input given: Homoscedastic case chosen by default with noise variance of 10 \n');
            noise_case = 0;
            noise_var = 10;
        elseif noise_case~=0 && noise_case~=1
            fprintf(2, 'Invalid input \n');
            return
        elseif noise_case==0
            noise_var = input('\n <strong> Choose noise variance in the range of 1-20 for homoscedastic case </strong> \n');
            if isempty(noise_var)
                fprintf(2, 'No input given: Noise variance of 10 chosen by default \n');
                noise_var = 10;
            elseif (noise_var<1 || noise_var>20)
                fprintf(2, 'Invalid input: Noise variance of 10 chosen by default \n');
                noise_var = 10;
            end
        else
            SNR = input('\n <strong> Choose SNR in the range of 5-500 for heteroscedastic case </strong> \n');
            if isempty(SNR)
                fprintf(2, 'No input given: SNR of 50 chosen by default \n');
                SNR = 50;
            elseif (SNR<5 || SNR>500)
                fprintf(2, 'Invalid input: SNR of 50 chosen by default \n');
                SNR = 50;
            end
        end


        Nrepeats = input('\n <strong> Enter a value between 1-100 for the no. of datasets to be generated with different noise samples, for the network </strong> \n');
        if isempty(Nrepeats)
            fprintf(2, 'No input given: Set to default of 10\n')
            Nrepeats = 10;
        elseif Nrepeats<1 || Nrepeats>100
            fprintf(2, 'Invalid number: Set to default of 10\n')
            Nrepeats = 10;
        else
            Nrepeats = round(Nrepeats);
        end

        NSamples = e_c*Nmultiple;
        fprintf(2, 'Randomly generating %d datasets satisfying given SNR with %d samples each\n',Nrepeats,NSamples);

    else
        SNR = [];
        NSamples = e_c*Nmultiple;
        Nrepeats = 1;
        fprintf(2, 'Randomly generating a noisefree dataset with %d samples \n',NSamples);
    end

    %% Data generation using random generators
    % Chord flows are independently generated
    % Branch flows are generated from chord flows using cutset equations%
   [X,Sigma_e] = Data_Generation(e_c,branch,chord,b,c,Cc_Con,NSamples,SNR,noise_flag,Nrepeats,noise_var,noise_case);    
    
end

%% Steps to finding the incidence matrix from data and partial incidence information
if data_flag == 1
    e_c = size(X,1);
    NSamples = size(X,2);
    
    % Finding the Error Covariance matrix
    if noise_flag == 0
        Sigma_e = [];
    else
        if size(SNR,1)==1
            sdv_noise = ones(e,1);
        else
            sdv_noise = sqrt(sdv(X,0,2).^2./SNR);
        end
        Sigma_e = diag(sdv_noise.^2);
    end
    
    tstart = tic;
    [Ahat,sin_vals] = Linear_Model(X,e_c,NSamples,noise_flag,Sigma_e,e_c-n_c+1);    % Finding a linear model by applying PCA on data
    if rank(Ab)~= size(Ahat,1)
        fprintf(2, 'The conservation graph could not be identified from given data \n');
    else
        branch = Ab_edges;
        chord = setdiff(1:e_c,branch);
        b = size(branch,2); % No of branches
        c = e_c-b; % No of chords      
        Cc = inv(Ahat(:,branch))*Ahat(:,chord);
        Cf = [round(Cc) eye(b)];
        Ar = Ab*Cf;
        Inc_pred = [Ar;zeros(1,e_c)];
        for j = 1:e_c
            if ~any(Inc_pred(:,j)==1)
                Inc_pred(end,j)=1;
            elseif ~any(Inc_pred(:,j)==-1)
                Inc_pred(end,j)=-1;
            end
        end
        time = toc(tstart);
        temp = [[chord branch];Inc_pred];
        temp = sortrows(temp',1)';
        Inc_pred = temp(2:end,:);
        Inc_pred(Inc_pred>1) = nan;    % Elements greater than 1 are turned to nan
        Inc_pred(Inc_pred<-1) = nan;    % Elements lesser than -1 are turned to nan
        % Verifying if the predicted matrix is a possible incidence matrix
        % of a conservation graph
        correct_edges = [];
        for j=1:e_c
            if any(Inc_pred(:,j)>1)||any(Inc_pred(:,j)<-1)||any(Inc_pred(:,1)>0&Inc_pred(:,1)<1)||any(Inc_pred(:,1)<0&Inc_pred(:,1)>-1)
                continue
            elseif sum(Inc_pred(:,1)==-1)~=1
                continue
            elseif sum(Inc_pred(:,1)==-1)~=1
                continue
            else
                correct_edges = [correct_edges j]; 
            end
        end
        if isequal(sort(correct_edges),1:e_c) 
            fprintf(2, 'All unknown links are possibly predicted from given data in %f seconds and the complete incidence matrix is as follows \n', time);
            Inc_pred
        else
            pred_edges = setdiff(correct_edges,branch);
            fprintf(2, 'Among the unknown link connectivities, only %d could possibly be predicted from given data', size(pred_edges,2));
        end
    end
else
    if noise_flag == 0
        tstart = tic; 
        [Ahat,sin_vals] = Linear_Model(X,e_c,NSamples,noise_flag,Sigma_e,e_c-n_c+1); % Finding a linear model by applying PCA on data
        Cc = inv(Ahat(:,branch))*Ahat(:,chord);
        Cf = [round(Cc) eye(b)];
        Ar = Ab*Cf;
        Inc_pred = [Ar;zeros(1,e_c)];
        for j = 1:e_c
            if ~any(Inc_pred(:,j)==1)
                Inc_pred(end,j)=1;
            elseif ~any(Inc_pred(:,j)==-1)
                Inc_pred(end,j)=-1;
            end
        end
        time = toc(tstart);
        temp = [[chord branch];Inc_pred];
        temp = sortrows(temp',1)';
        Inc_pred = temp(2:end,:);
        if isequal(Inc_pred,Inc_Con)
            fprintf(2, 'The unknown links exactly identified from given data in %f seconds \n', time);
        end
    else
        test = zeros(1,Nrepeats);
        time = zeros(1,Nrepeats);
        for i=1:Nrepeats
            tstart = tic;
            [Ahat,sin_vals] = Linear_Model(X{1,i},e_c,NSamples,noise_flag,Sigma_e,e_c-n_c+1);  % Finding a linear model by applying PCA on data
            if size(Ahat,1)==b    % Testing if model order is correctly identified
                Cc = inv(Ahat(:,branch))*Ahat(:,chord);
                Cf = [round(Cc) eye(b)];
                Ar = Ab*Cf;
                Inc_pred = [Ar;zeros(1,e_c)];
                for j = 1:e_c
                    if ~any(Inc_pred(:,j)==1)
                        Inc_pred(end,j)=1;
                    elseif ~any(Inc_pred(:,j)==-1)
                        Inc_pred(end,j)=-1;
                    end
                end
                temp = [[chord branch];Inc_pred];
                temp = sortrows(temp',1)';
                Inc_pred = temp(2:end,:);
                if isequal(Inc_pred,Inc_Con)
                    test(i) = 100;
                else
                    correct_edges = [];
                    for k=1:e_c
                        if isequal(Inc_pred(:,k),Inc_Con(:,k))
                            correct_edges = [correct_edges k];
                        end
                    end
                    pred_edges = setdiff(correct_edges,branch);
                    test(i) = size(pred_edges,2)/c*100;
                    fprintf(2, 'With dataset %d, only %0.2f percent of the unknown link connections could be identified correctly \n', i, test(i));
                end
            end
            time(i) = toc(tstart);
        end
        avg_time = sum(time)/Nrepeats;
        avg_test = sum(test)/Nrepeats;
        if avg_test==0
            fprintf(2, 'None of the unknown links could be identified from any of %d dataset(s) that were generated \n', Nrepeats);
        elseif avg_test==100
            fprintf(2, 'All the unknown links are exactly identified in %0.2f percent cases of the %d dataset(s) that were generated at an average time of %f seconds \n', avg_test, Nrepeats, avg_time);
        end
    end
end
